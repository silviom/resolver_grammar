// Code generated by goyacc -o resolver.go -p resolver -v resolver.output resolver.y. DO NOT EDIT.

//line resolver.y:2
package main

import __yyfmt__ "fmt"

//line resolver.y:2
import "fmt"

//line resolver.y:6
type resolverSymType struct {
	yys    int
	String string
	Expr   expr
}

const BEGIN = 57346
const END = 57347
const NAME = 57348
const OPEN = 57349
const CLOSE = 57350
const SPACE = 57351
const NOT_SPACE = 57352
const COMMA = 57353

var resolverToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"BEGIN",
	"END",
	"NAME",
	"OPEN",
	"CLOSE",
	"SPACE",
	"NOT_SPACE",
	"COMMA",
}

var resolverStatenames = [...]string{}

const resolverEofCode = 1
const resolverErrCode = 2
const resolverInitialStackSize = 16

//line resolver.y:160

//line yacctab:1
var resolverExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const resolverPrivate = 57344

const resolverLast = 83

var resolverAct = [...]int{
	38, 37, 21, 36, 5, 31, 19, 16, 17, 15,
	20, 18, 5, 35, 10, 7, 8, 6, 11, 9,
	4, 34, 1, 33, 13, 32, 10, 7, 8, 6,
	11, 9, 57, 13, 52, 13, 31, 45, 46, 43,
	47, 30, 51, 2, 39, 31, 41, 53, 46, 40,
	42, 0, 0, 0, 46, 28, 25, 26, 24, 29,
	27, 39, 0, 49, 0, 41, 48, 50, 40, 42,
	55, 0, 0, 54, 56, 44, 23, 3, 45, 22,
	12, 0, 14,
}

var resolverPact = [...]int{
	8, -1000, 8, 20, 0, 70, -1000, -1000, -1000, -1000,
	-1000, -1000, 20, 49, 20, -1000, -1000, -1000, -1000, -1000,
	-1000, 36, 70, 14, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -4, 6, 40, 40, 67, 59, 57, 70,
	-1000, -1000, -1000, 26, -1000, 40, 64, 59, -1000, -1000,
	-1000, 27, -1000, 59, -1000, -1000, -1000, -1000,
}

var resolverPgo = [...]int{
	0, 20, 77, 43, 2, 3, 1, 0, 22,
}

var resolverR1 = [...]int{
	0, 8, 3, 3, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 4, 4, 5, 5, 5, 6, 6, 6,
	6, 7, 7, 7, 7, 7, 7,
}

var resolverR2 = [...]int{
	0, 1, 2, 1, 2, 2, 3, 1, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	2, 2, 5, 4, 0, 1, 3, 2, 2, 3,
	1, 2, 2, 2, 1, 1, 1,
}

var resolverChk = [...]int{
	-1000, -8, -3, -2, -1, 4, 9, 7, 8, 11,
	6, 10, -2, -1, -2, 9, 7, 8, 11, 6,
	10, -4, 9, 6, 9, 7, 8, 11, 6, 10,
	5, 9, -4, 9, 7, 7, -5, -6, -7, 4,
	9, 6, 10, -5, 8, 11, -7, -6, 9, 6,
	10, -4, 8, -6, 9, 6, 10, 5,
}

var resolverDef = [...]int{
	0, -2, 1, 3, 7, 0, 14, 15, 16, 17,
	18, 19, 2, 5, 4, 8, 9, 10, 11, 12,
	13, 0, 0, 0, 8, 9, 10, 11, 12, 13,
	6, 21, 20, 0, 24, 24, 0, 25, 30, 0,
	34, 35, 36, 0, 23, 0, 28, 27, 31, 32,
	33, 0, 22, 26, 31, 32, 33, 29,
}

var resolverTok1 = [...]int{
	1,
}

var resolverTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
}

var resolverTok3 = [...]int{
	0,
}

var resolverErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	resolverDebug        = 0
	resolverErrorVerbose = false
)

type resolverLexer interface {
	Lex(lval *resolverSymType) int
	Error(s string)
}

type resolverParser interface {
	Parse(resolverLexer) int
	Lookahead() int
}

type resolverParserImpl struct {
	lval  resolverSymType
	stack [resolverInitialStackSize]resolverSymType
	char  int
}

func (p *resolverParserImpl) Lookahead() int {
	return p.char
}

func resolverNewParser() resolverParser {
	return &resolverParserImpl{}
}

const resolverFlag = -1000

func resolverTokname(c int) string {
	if c >= 1 && c-1 < len(resolverToknames) {
		if resolverToknames[c-1] != "" {
			return resolverToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func resolverStatname(s int) string {
	if s >= 0 && s < len(resolverStatenames) {
		if resolverStatenames[s] != "" {
			return resolverStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func resolverErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !resolverErrorVerbose {
		return "syntax error"
	}

	for _, e := range resolverErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + resolverTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := resolverPact[state]
	for tok := TOKSTART; tok-1 < len(resolverToknames); tok++ {
		if n := base + tok; n >= 0 && n < resolverLast && resolverChk[resolverAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if resolverDef[state] == -2 {
		i := 0
		for resolverExca[i] != -1 || resolverExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; resolverExca[i] >= 0; i += 2 {
			tok := resolverExca[i]
			if tok < TOKSTART || resolverExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if resolverExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += resolverTokname(tok)
	}
	return res
}

func resolverlex1(lex resolverLexer, lval *resolverSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = resolverTok1[0]
		goto out
	}
	if char < len(resolverTok1) {
		token = resolverTok1[char]
		goto out
	}
	if char >= resolverPrivate {
		if char < resolverPrivate+len(resolverTok2) {
			token = resolverTok2[char-resolverPrivate]
			goto out
		}
	}
	for i := 0; i < len(resolverTok3); i += 2 {
		token = resolverTok3[i+0]
		if token == char {
			token = resolverTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = resolverTok2[1] /* unknown char */
	}
	if resolverDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", resolverTokname(token), uint(char))
	}
	return char, token
}

func resolverParse(resolverlex resolverLexer) int {
	return resolverNewParser().Parse(resolverlex)
}

func (resolverrcvr *resolverParserImpl) Parse(resolverlex resolverLexer) int {
	var resolvern int
	var resolverVAL resolverSymType
	var resolverDollar []resolverSymType
	_ = resolverDollar // silence set and not used
	resolverS := resolverrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	resolverstate := 0
	resolverrcvr.char = -1
	resolvertoken := -1 // resolverrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		resolverstate = -1
		resolverrcvr.char = -1
		resolvertoken = -1
	}()
	resolverp := -1
	goto resolverstack

ret0:
	return 0

ret1:
	return 1

resolverstack:
	/* put a state and value onto the stack */
	if resolverDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", resolverTokname(resolvertoken), resolverStatname(resolverstate))
	}

	resolverp++
	if resolverp >= len(resolverS) {
		nyys := make([]resolverSymType, len(resolverS)*2)
		copy(nyys, resolverS)
		resolverS = nyys
	}
	resolverS[resolverp] = resolverVAL
	resolverS[resolverp].yys = resolverstate

resolvernewstate:
	resolvern = resolverPact[resolverstate]
	if resolvern <= resolverFlag {
		goto resolverdefault /* simple state */
	}
	if resolverrcvr.char < 0 {
		resolverrcvr.char, resolvertoken = resolverlex1(resolverlex, &resolverrcvr.lval)
	}
	resolvern += resolvertoken
	if resolvern < 0 || resolvern >= resolverLast {
		goto resolverdefault
	}
	resolvern = resolverAct[resolvern]
	if resolverChk[resolvern] == resolvertoken { /* valid shift */
		resolverrcvr.char = -1
		resolvertoken = -1
		resolverVAL = resolverrcvr.lval
		resolverstate = resolvern
		if Errflag > 0 {
			Errflag--
		}
		goto resolverstack
	}

resolverdefault:
	/* default state action */
	resolvern = resolverDef[resolverstate]
	if resolvern == -2 {
		if resolverrcvr.char < 0 {
			resolverrcvr.char, resolvertoken = resolverlex1(resolverlex, &resolverrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if resolverExca[xi+0] == -1 && resolverExca[xi+1] == resolverstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			resolvern = resolverExca[xi+0]
			if resolvern < 0 || resolvern == resolvertoken {
				break
			}
		}
		resolvern = resolverExca[xi+1]
		if resolvern < 0 {
			goto ret0
		}
	}
	if resolvern == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			resolverlex.Error(resolverErrorMessage(resolverstate, resolvertoken))
			Nerrs++
			if resolverDebug >= 1 {
				__yyfmt__.Printf("%s", resolverStatname(resolverstate))
				__yyfmt__.Printf(" saw %s\n", resolverTokname(resolvertoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for resolverp >= 0 {
				resolvern = resolverPact[resolverS[resolverp].yys] + resolverErrCode
				if resolvern >= 0 && resolvern < resolverLast {
					resolverstate = resolverAct[resolvern] /* simulate a shift of "error" */
					if resolverChk[resolverstate] == resolverErrCode {
						goto resolverstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if resolverDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", resolverS[resolverp].yys)
				}
				resolverp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if resolverDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", resolverTokname(resolvertoken))
			}
			if resolvertoken == resolverEofCode {
				goto ret1
			}
			resolverrcvr.char = -1
			resolvertoken = -1
			goto resolvernewstate /* try again in the same state */
		}
	}

	/* reduction by production resolvern */
	if resolverDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", resolvern, resolverStatname(resolverstate))
	}

	resolvernt := resolvern
	resolverpt := resolverp
	_ = resolverpt // guard against "declared and not used"

	resolverp -= resolverR2[resolvern]
	// resolverp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if resolverp+1 >= len(resolverS) {
		nyys := make([]resolverSymType, len(resolverS)*2)
		copy(nyys, resolverS)
		resolverS = nyys
	}
	resolverVAL = resolverS[resolverp+1]

	/* consult goto table to find next state */
	resolvern = resolverR1[resolvern]
	resolverg := resolverPgo[resolvern]
	resolverj := resolverg + resolverS[resolverp].yys + 1

	if resolverj >= resolverLast {
		resolverstate = resolverAct[resolverg]
	} else {
		resolverstate = resolverAct[resolverj]
		if resolverChk[resolverstate] != -resolvern {
			resolverstate = resolverAct[resolverg]
		}
	}
	// dummy call; replaced with literal code
	switch resolvernt {

	case 1:
		resolverDollar = resolverS[resolverpt-1 : resolverpt+1]
//line resolver.y:18
		{
			fmt.Printf("PARSE RESULT:\n%v\n", resolverDollar[1].Expr)
			resolverlex.(*interpreter).parseResult = resolverDollar[1].Expr
		}
	case 2:
		resolverDollar = resolverS[resolverpt-2 : resolverpt+1]
//line resolver.y:25
		{
			stmts := resolverDollar[1].Expr.(*stmtsAST)
			stmts.list = append(stmts.list, resolverDollar[2].Expr.(*stmtAST))
			resolverVAL.Expr = resolverDollar[1].Expr
			fmt.Printf(">> stmts | stmts stmt\n")
		}
	case 3:
		resolverDollar = resolverS[resolverpt-1 : resolverpt+1]
//line resolver.y:31
		{
			stmts := &stmtsAST{}
			stmts.list = append(stmts.list, resolverDollar[1].Expr.(*stmtAST))
			resolverVAL.Expr = stmts
			fmt.Printf(">> stmts | stmt\n")
		}
	case 4:
		resolverDollar = resolverS[resolverpt-2 : resolverpt+1]
//line resolver.y:40
		{
			stmt := resolverDollar[2].Expr.(*stmtAST)
			stmt.before = resolverDollar[1].Expr.(string) + stmt.before
			resolverVAL.Expr = stmt
			fmt.Printf(">> stmt | text stmt\n")
		}
	case 5:
		resolverDollar = resolverS[resolverpt-2 : resolverpt+1]
//line resolver.y:46
		{
			stmt := resolverDollar[1].Expr.(*stmtAST)
			stmt.after += resolverDollar[2].Expr.(string)
			resolverVAL.Expr = stmt
			fmt.Printf(">> stmt | stmt text\n")
		}
	case 6:
		resolverDollar = resolverS[resolverpt-3 : resolverpt+1]
//line resolver.y:52
		{
			resolverVAL.Expr = &stmtAST{
				resolver: resolverDollar[2].Expr.(*resolverAST),
			}
			fmt.Printf(">> stmt | BEGIN resolver END \n")
		}
	case 7:
		resolverDollar = resolverS[resolverpt-1 : resolverpt+1]
//line resolver.y:58
		{
			resolverVAL.Expr = &stmtAST{
				before: resolverDollar[1].Expr.(string),
			}
			fmt.Printf(">> stmt | text \n")
		}
	case 8:
		resolverDollar = resolverS[resolverpt-2 : resolverpt+1]
//line resolver.y:67
		{
			resolverVAL.Expr = resolverDollar[1].Expr.(string) + resolverDollar[2].String
			fmt.Printf(">> text | text SPACE \n")
		}
	case 9:
		resolverDollar = resolverS[resolverpt-2 : resolverpt+1]
//line resolver.y:68
		{
			resolverVAL.Expr = resolverDollar[1].Expr.(string) + resolverDollar[2].String
			fmt.Printf(">> text | text OPEN \n")
		}
	case 10:
		resolverDollar = resolverS[resolverpt-2 : resolverpt+1]
//line resolver.y:69
		{
			resolverVAL.Expr = resolverDollar[1].Expr.(string) + resolverDollar[2].String
			fmt.Printf(">> text | text CLOSE \n")
		}
	case 11:
		resolverDollar = resolverS[resolverpt-2 : resolverpt+1]
//line resolver.y:70
		{
			resolverVAL.Expr = resolverDollar[1].Expr.(string) + resolverDollar[2].String
			fmt.Printf(">> text | text COMMA \n")
		}
	case 12:
		resolverDollar = resolverS[resolverpt-2 : resolverpt+1]
//line resolver.y:71
		{
			resolverVAL.Expr = resolverDollar[1].Expr.(string) + resolverDollar[2].String
			fmt.Printf(">> text | text NAME \n")
		}
	case 13:
		resolverDollar = resolverS[resolverpt-2 : resolverpt+1]
//line resolver.y:72
		{
			resolverVAL.Expr = resolverDollar[1].Expr.(string) + resolverDollar[2].String
			fmt.Printf(">> text | text NOT_SPACE \n")
		}
	case 14:
		resolverDollar = resolverS[resolverpt-1 : resolverpt+1]
//line resolver.y:73
		{
			resolverVAL.Expr = resolverDollar[1].String
			fmt.Printf(">> text | SPACE \n")
		}
	case 15:
		resolverDollar = resolverS[resolverpt-1 : resolverpt+1]
//line resolver.y:74
		{
			resolverVAL.Expr = resolverDollar[1].String
			fmt.Printf(">> text | OPEN \n")
		}
	case 16:
		resolverDollar = resolverS[resolverpt-1 : resolverpt+1]
//line resolver.y:75
		{
			resolverVAL.Expr = resolverDollar[1].String
			fmt.Printf(">> text | CLOSE \n")
		}
	case 17:
		resolverDollar = resolverS[resolverpt-1 : resolverpt+1]
//line resolver.y:76
		{
			resolverVAL.Expr = resolverDollar[1].String
			fmt.Printf(">> text | COMMA \n")
		}
	case 18:
		resolverDollar = resolverS[resolverpt-1 : resolverpt+1]
//line resolver.y:77
		{
			resolverVAL.Expr = resolverDollar[1].String
			fmt.Printf(">> text | NAME \n")
		}
	case 19:
		resolverDollar = resolverS[resolverpt-1 : resolverpt+1]
//line resolver.y:78
		{
			resolverVAL.Expr = resolverDollar[1].String
			fmt.Printf(">> text | NOT_SPACE \n")
		}
	case 20:
		resolverDollar = resolverS[resolverpt-2 : resolverpt+1]
//line resolver.y:82
		{
			resolverVAL.Expr = resolverDollar[2].Expr
			fmt.Printf(">> resolver | SPACE resolver\n")
		}
	case 21:
		resolverDollar = resolverS[resolverpt-2 : resolverpt+1]
//line resolver.y:86
		{
			resolverVAL.Expr = resolverDollar[1].Expr
			fmt.Printf(">> resolver | resolver SPACE\n")
		}
	case 22:
		resolverDollar = resolverS[resolverpt-5 : resolverpt+1]
//line resolver.y:90
		{
			resolverVAL.Expr = &resolverAST{
				name:      resolverDollar[1].String,
				arguments: resolverDollar[4].Expr.(*argsAST),
			}
			fmt.Printf(">> resolver |NAME SPACE OPEN arguments CLOSE \n")
		}
	case 23:
		resolverDollar = resolverS[resolverpt-4 : resolverpt+1]
//line resolver.y:97
		{
			resolverVAL.Expr = &resolverAST{
				name:      resolverDollar[1].String,
				arguments: resolverDollar[3].Expr.(*argsAST),
			}
			fmt.Printf(">> resolver | NAME OPEN arguments CLOSE\n")
		}
	case 24:
		resolverDollar = resolverS[resolverpt-0 : resolverpt+1]
//line resolver.y:107
		{
			resolverVAL.Expr = &argsAST{}
			fmt.Printf(">> args | empty\n")
		}
	case 25:
		resolverDollar = resolverS[resolverpt-1 : resolverpt+1]
//line resolver.y:111
		{
			args := &argsAST{}
			args.list = append(args.list, resolverDollar[1].Expr.(*argAST))
			resolverVAL.Expr = args
			fmt.Printf(">> args | argument\n")
		}
	case 26:
		resolverDollar = resolverS[resolverpt-3 : resolverpt+1]
//line resolver.y:117
		{
			args := resolverDollar[1].Expr.(*argsAST)
			args.list = append(args.list, resolverDollar[3].Expr.(*argAST))
			resolverVAL.Expr = args
			fmt.Printf(">> arguments | arguments COMMA argument\n")
		}
	case 27:
		resolverDollar = resolverS[resolverpt-2 : resolverpt+1]
//line resolver.y:126
		{
			arg := resolverDollar[2].Expr.(*argAST)
			arg.before = resolverDollar[1].Expr.(string) + arg.before
			resolverVAL.Expr = arg
			fmt.Printf(">> argument | argument_text argument\n")
		}
	case 28:
		resolverDollar = resolverS[resolverpt-2 : resolverpt+1]
//line resolver.y:132
		{
			arg := resolverDollar[1].Expr.(*argAST)
			arg.after += resolverDollar[2].Expr.(string)
			resolverVAL.Expr = arg
			fmt.Printf(">> argument | argument argument_text\n")
		}
	case 29:
		resolverDollar = resolverS[resolverpt-3 : resolverpt+1]
//line resolver.y:138
		{
			resolverVAL.Expr = &argAST{
				resolver: resolverDollar[2].Expr.(*resolverAST),
			}
			fmt.Printf(">> argument | BEGIN resolver END \n")
		}
	case 30:
		resolverDollar = resolverS[resolverpt-1 : resolverpt+1]
//line resolver.y:144
		{
			resolverVAL.Expr = &argAST{
				before: resolverDollar[1].Expr.(string),
			}
			fmt.Printf(">> argument | argument_text \n")
		}
	case 31:
		resolverDollar = resolverS[resolverpt-2 : resolverpt+1]
//line resolver.y:153
		{
			resolverVAL.Expr = resolverDollar[1].Expr.(string) + resolverDollar[2].String
			fmt.Printf(">> argument_text | argument_text SPACE\n")
		}
	case 32:
		resolverDollar = resolverS[resolverpt-2 : resolverpt+1]
//line resolver.y:154
		{
			resolverVAL.Expr = resolverDollar[1].Expr.(string) + resolverDollar[2].String
			fmt.Printf(">> argument_text | argument_text NAME\n")
		}
	case 33:
		resolverDollar = resolverS[resolverpt-2 : resolverpt+1]
//line resolver.y:155
		{
			resolverVAL.Expr = resolverDollar[1].Expr.(string) + resolverDollar[2].String
			fmt.Printf(">> argument_text | argument_text NOT_SPACE\n")
		}
	case 34:
		resolverDollar = resolverS[resolverpt-1 : resolverpt+1]
//line resolver.y:156
		{
			resolverVAL.Expr = resolverDollar[1].String
			fmt.Printf(">> argument_text | SPACE\n")
		}
	case 35:
		resolverDollar = resolverS[resolverpt-1 : resolverpt+1]
//line resolver.y:157
		{
			resolverVAL.Expr = resolverDollar[1].String
			fmt.Printf(">> argument_text | NAME\n")
		}
	case 36:
		resolverDollar = resolverS[resolverpt-1 : resolverpt+1]
//line resolver.y:158
		{
			resolverVAL.Expr = resolverDollar[1].String
			fmt.Printf(">> argument_text | NOT_SPACE\n")
		}
	}
	goto resolverstack /* stack new state and value */
}
